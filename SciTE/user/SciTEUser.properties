# User initialization file for SciTE4AutoHotkey
#
# You are encouraged to edit this file!
#

# Import the platform-specific settings
import _platform
# import lexers/lpeg_s4a

# Import the settings that can be edited by the bundled properties editor
import _config

# calltip显示的时候无法显示单词自动完成,而且很难关掉,严重影响写代码的流畅度
# 下面这条设置让calltip仅在单词完成的那一瞬显示
calltip.ahk1.parameters.end=$(chars.alpha)$(chars.numeric)$(chars.accented)$_@#

# 标题栏显示完整路径
title.full.path=1

# 两处翻译
command.name.1.$(file.patterns.ahk)=快速运行
command.name.2.*=调试一个运行中的脚本...

# Add here your own settings
# Open containing folder
command.name.10.*=打开文件所在目录...
command.10.*=explorer.exe /n, /select,"$(FilePath)"
command.mode.10.*=savebefore:no
command.subsystem.10.*=2
# SciTE4AutoHotkey settings
command.name.11.*=设置 SciTE4AutoHotkey...
command.mode.11.*=subsystem:shellexec,savebefore:no
command.11.*="$(LocalAHK)" /ErrorStdOut "$(SciteDefaultHome)\tools\PropEdit.ahk"
# SciTE4AutoHotkey diag util
command.name.12.*=诊断 SciTE4AutoHotkey...
command.mode.12.*=subsystem:shellexec,savebefore:no
command.12.*="$(LocalAHK)" /ErrorStdOut "$(SciteDefaultHome)\tools\SciTEDiag.ahk"

# 命令名字
command.name.40.*=运行 Lua
# 3代表Lua扩展
command.subsystem.40.*=3
# 命令具体做啥 数字大于9以后 需要指定一个明确的快捷键
# 这里也可以直接调用加载的函数，例如调用调试功能
# command.40.*=DBGp_Run
command.40.*=dofile $(FilePath)
# 模式：运行前会先保存
command.mode.40.*=savebefore:yes
# 快捷键
command.shortcut.40.*=F10

# Contextual menu
# 给右键菜单添加对应功能,将 "command.name.数字.*" 中的数字加1100即可
# 最大支持0-49，也就是1100-1149。因为原版command命令就只支持0-49共50个。
user.context.menu=||\
打开文件所在目录...|1110|\
打开 #Include|1121|\
||\
添加到 Scriptlet...|1122|\
运行选区代码 (Ctrl+3)|1123|\
||\
检查变量...|1126|

# 快捷键定义，首行“user.shortcuts=\”是必须的
user.shortcuts=\
Ctrl+Shift+Tab|IDM_PREVFILE|\
Ctrl+Tab|IDM_NEXTFILE|\
Ctrl+3|1123|

# 一个tab等于几个空格，一个缩进等于几个空格
tabsize=2
indent.size=2

# 使F1调用中文帮助“AutoHotkey_CN.chm”
# 关键词后面加一个字符“|”，可以使关键词始终显示在edit控件中，同时不改变对应定位
# 关键词后面加其它字符，例如“空格”，会导致对应定位改变（“substr ”会定位到“styles for GUI command”上）
# 为何一定要让关键词始终显示出来？因为“智能F1”靠edit中是否存在关键词来判断要不要补一个回车
# 假想如下情况，对着msgbox按f1，帮助文件直接跳到msgbox页面，edit为空
# 接着对着substr按f1，帮助文件无任何改变，edit内容为“substr”，但索引下显示已定位到“substr()”，此时只需一个回车即可跳转到正确页面，故“智能F1”发送一个回车
# 再次对着msgbox按f1，帮助文件直接跳到msgbox页面，但edit内容依然为“substr”，此时就会被“智能F1”错误识别
# 故需要添加一个字符“|”，使得当前关键词总是显示出来
# 2019.12.2中文帮助更新后，在末尾添加字符“|”会导致页面无法正常跳转，故“$(CurrentWord)!|$(AutoHotkeyDir)”替换为“$(CurrentWord)!$(AutoHotkeyDir)”
# 智能F1为解决的问题是，msgbox一类纯命令可以正常跳转，substr()之类的函数却不行。所以新的实现方式为，跳转完成后，永远清空当前关键词。
# 2020.7.24，智能F1全面接管F1调用帮助的问题，使得所有命令都可以跳转，因此屏蔽掉scite自带的F1功能。
# command.help.$(file.patterns.ahk)=$(CurrentWord)!$(AutoHotkeyDir)\AutoHotkey_CN.chm